{
  "address": "0xFf6b4Bb55a98E5E3b77959c75b3D745bbB1Fea74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUser",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_busd",
          "type": "address"
        },
        {
          "internalType": "contract IKeplerToken",
          "name": "_sds",
          "type": "address"
        },
        {
          "internalType": "contract IKeplerFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCrycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldMainfest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMainfest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewMainfest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldTelegram",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newTelegram",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewTelegram",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewTitle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "crycle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSended",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReceived",
          "type": "uint256"
        }
      ],
      "name": "NewVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beginAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "NewVoteInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DebugSetBeginAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DebugSetCountAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DebugSetFinishAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_INVITER_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "addCrycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canCreateCrycle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        }
      ],
      "name": "createCrycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crycleVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crycles",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "userNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_crycles",
          "type": "address[]"
        }
      ],
      "name": "doCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "doVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKeplerFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVoteId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sds",
      "outputs": [
        {
          "internalType": "contract IKeplerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "mainfest",
          "type": "string"
        }
      ],
      "name": "setMainfest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        }
      ],
      "name": "setTelegram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "setTitle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "beginAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        }
      ],
      "name": "startVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "user",
      "outputs": [
        {
          "internalType": "contract IUser",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCrycle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voteInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beginAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "voteNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voteReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voteWiners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb24ad435e2d46136aa2850a594d269940f83c8de1af62ae1aa414d1b2dd78092",
  "receipt": {
    "to": null,
    "from": "0x92Ac13DfFf2e421e53dFD2873Ea295EdC9504764",
    "contractAddress": "0xFf6b4Bb55a98E5E3b77959c75b3D745bbB1Fea74",
    "transactionIndex": 1,
    "gasUsed": "3201507",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a00000000000020000000000000000000800004000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000020000000000000000000000000000000000000000000000000000000000040000000",
    "blockHash": "0x4e137c4d609b790429b87e4c6d93283c55826d212076581924427afd17253828",
    "transactionHash": "0xb24ad435e2d46136aa2850a594d269940f83c8de1af62ae1aa414d1b2dd78092",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11615415,
        "transactionHash": "0xb24ad435e2d46136aa2850a594d269940f83c8de1af62ae1aa414d1b2dd78092",
        "address": "0xFf6b4Bb55a98E5E3b77959c75b3D745bbB1Fea74",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092ac13dfff2e421e53dfd2873ea295edc9504764"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x4e137c4d609b790429b87e4c6d93283c55826d212076581924427afd17253828"
      }
    ],
    "blockNumber": 11615415,
    "cumulativeGasUsed": "3295029",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9D51d0d1691F490619BA9d407b703a0e3067071F",
    "0x7E1854545320f34a089416D665C1116556a884ac",
    "0x552dF0cbF8C1aBad22e7B588ca72Dfc785Dbe37E",
    "0xF849e5E6088e08C65a38E6bc44B92b0aA066EF38",
    "0xC2971EF8D6616790Db5f557Ff78DFa4fe303eC48",
    "0x1629c48F23F0E961f376936f0D6E139cB139b3A8"
  ],
  "solcInputHash": "242b40143480c3f95a14b352a9b967fb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUser\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"contract IKeplerToken\",\"name\":\"_sds\",\"type\":\"address\"},{\"internalType\":\"contract IKeplerFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCrycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldMainfest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMainfest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMainfest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldTelegram\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTelegram\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewTelegram\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewTitle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crycle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSended\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beginAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"NewVoteInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DebugSetBeginAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DebugSetCountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DebugSetFinishAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVITER_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"addCrycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canCreateCrycle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"}],\"name\":\"createCrycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crycleVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crycles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_crycles\",\"type\":\"address[]\"}],\"name\":\"doCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"doVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKeplerFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sds\",\"outputs\":[{\"internalType\":\"contract IKeplerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mainfest\",\"type\":\"string\"}],\"name\":\"setMainfest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"}],\"name\":\"setTelegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"setTitle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"}],\"name\":\"startVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"contract IUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCrycle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beginAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"voteNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteWiners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/Crycle.sol\":\"Crycle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/farm/Crycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../interfaces/IKeplerFactory.sol';\\nimport '../interfaces/IKeplerToken.sol';\\nimport '../interfaces/IKeplerPair.sol';\\nimport '../interfaces/IMasterChef.sol';\\nimport '../interfaces/IUser.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract Crycle is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    event NewCrycle(address creator, string title, string mainfest, string telegram, uint256 timestamp);\\n    event NewTitle(address creator, string oldTitle, string newTitle, uint256 timestamp);\\n    event NewMainfest(address creator, string oldMainfest, string newMainfest, uint256 timestamp);\\n    event NewTelegram(address creator, string oldTelegram, string newTelegram, uint256 timestamp);\\n    event NewUser(address user, address creator, uint256 userNum, uint256 timestamp);\\n    event NewVoteInfo(uint256 voteId, uint256 beginAt, uint256 countAt, uint256 finishAt, uint256 reward);\\n    event NewVote(uint256 voteId, address user, address crycle, uint256 num, uint totalSended, uint totalReceived);\\n\\n    IUser public immutable user;\\n    IMasterChef public immutable masterChef;\\n    IKeplerPair[] public pairs;\\n    IERC20 public immutable busd;\\n    IKeplerToken public immutable sds;\\n    IKeplerFactory public immutable factory;\\n\\n    uint256 constant public MIN_LOCK_AMOUNT = 500 * 1e18;\\n    uint256 constant public MIN_INVITER_AMOUNT = 5000 * 1e18;\\n\\n    struct CrycleInfo {\\n        address creator;\\n        string title;\\n        string mainfest;\\n        string telegram;\\n        uint256 userNum;\\n    }\\n    mapping(address => CrycleInfo) public crycles;\\n    mapping(address => address) public userCrycle;\\n    mapping(uint256 => mapping(address => uint256)) public userVote;\\n    mapping(uint256 => mapping(address => uint256)) public crycleVote;\\n    mapping(uint256 => address[]) public voteWiners;\\n    mapping(uint256 => mapping(address => uint256)) public voteReward;\\n\\n    function addPair(IKeplerPair pair) external onlyOwner {\\n        pairs.push(pair);\\n    }\\n\\n    function removePair(uint index) external onlyOwner {\\n        require(index < pairs.length, \\\"illegal index\\\");\\n        if (index < pairs.length - 1) {\\n            pairs[index] = pairs[pairs.length - 1];\\n        }\\n        pairs.pop();\\n    }\\n\\n\\n    constructor(IUser _user, IMasterChef _masterChef, IKeplerPair _pair, IERC20 _busd, IKeplerToken _sds, IKeplerFactory _factory) {\\n        user = _user;\\n        masterChef = _masterChef;\\n        pairs.push(_pair);\\n        busd = _busd;\\n        sds = _sds;\\n        factory = _factory;\\n    }\\n\\n    function getPairTokenPrice(IKeplerPair _pair, IERC20 token) internal view returns(uint price) {\\n        address token0 = _pair.token0();\\n        address token1 = _pair.token1();\\n        require(token0 == address(token) || token1 == address(token), \\\"illegal token\\\");\\n        (uint reserve0, uint reserve1,) = _pair.getReserves();\\n        if (address(token) == token0) {\\n            if (reserve0 != 0) {\\n                return IERC20(token0).balanceOf(address(_pair)).mul(1e18).div(reserve0);\\n            }\\n        } else if (address(token) == token1) {\\n            if (reserve1 != 0) {\\n                return IERC20(token1).balanceOf(address(_pair)).mul(1e18).div(reserve1);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function canCreateCrycle(address _user) public view returns (bool) {\\n        uint totalUser = 0;\\n        uint totalInviter = 0;\\n        for (uint i = 0; i < pairs.length; i ++) {\\n            uint price = getPairTokenPrice(pairs[i], busd);\\n            uint balanceUser = masterChef.getUserAmount(pairs[i], _user, 3);\\n            uint balanceInviter = masterChef.getInviterAmount(pairs[i], _user);\\n            totalUser = totalUser.add(balanceUser.mul(price).div(1e18));\\n            totalInviter = totalInviter.add(balanceInviter.mul(price).div(1e18));\\n        }\\n        if (totalUser >= MIN_LOCK_AMOUNT || totalInviter >= MIN_INVITER_AMOUNT) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function createCrycle(string memory title, string memory mainfest, string memory telegram) external {\\n        require(!address(msg.sender).isContract(), \\\"contract can not create crycle\\\");\\n        require(bytes(title).length <= 32, \\\"title too long\\\");\\n        require(bytes(mainfest).length <= 1024, \\\"mainfest too long\\\");\\n        require(bytes(telegram).length <= 256, \\\"mainfest too long\\\");\\n        require(canCreateCrycle(msg.sender), \\\"at lease lock 500 BUSD and SDS or invite 5000 BUSD and SDS\\\");\\n        require(crycles[msg.sender].creator == address(0), \\\"already create crycle\\\");\\n        require(userCrycle[msg.sender] == address(0), \\\"already in crycle\\\");\\n        crycles[msg.sender] = CrycleInfo({\\n            creator: msg.sender,\\n            title: title,\\n            mainfest: mainfest,\\n            telegram: telegram,\\n            userNum: 0\\n        });\\n        userCrycle[msg.sender] = msg.sender;\\n        crycles[msg.sender].userNum = crycles[msg.sender].userNum + 1;\\n        emit NewCrycle(msg.sender, title, mainfest, telegram, block.timestamp);\\n        emit NewUser(msg.sender, msg.sender, crycles[msg.sender].userNum, block.timestamp);\\n    }\\n\\n    function setTitle(string memory title) external {\\n        require(bytes(title).length <= 32, \\\"title too long\\\");\\n        require(crycles[msg.sender].creator != address(0), \\\"crycle not create\\\");\\n        string memory oldTitle = crycles[msg.sender].title;\\n        crycles[msg.sender].title = title;\\n        emit NewTitle(msg.sender, oldTitle, title, block.timestamp);\\n    }\\n\\n    function setMainfest(string memory mainfest) external {\\n        require(bytes(mainfest).length <= 1024, \\\"mainfest too long\\\");\\n        require(crycles[msg.sender].creator != address(0), \\\"crycle not create\\\");\\n        string memory oldMainfest = crycles[msg.sender].mainfest;\\n        crycles[msg.sender].mainfest = mainfest;\\n        emit NewMainfest(msg.sender, oldMainfest, mainfest, block.timestamp);\\n    }\\n\\n    function setTelegram(string memory telegram) external {\\n        require(bytes(telegram).length <= 256, \\\"mainfest too long\\\");\\n        require(crycles[msg.sender].creator != address(0), \\\"crycle not create\\\");\\n        string memory oldTelegram = crycles[msg.sender].telegram;\\n        crycles[msg.sender].telegram = telegram;\\n        emit NewTelegram(msg.sender, oldTelegram, telegram, block.timestamp);\\n    }\\n\\n    function addCrycle(address creator) external {\\n        require(msg.sender != creator, \\\"can not add yourself\\\");\\n        require(user.userExists(msg.sender), \\\"user not registe\\\");\\n        require(crycles[creator].creator != address(0), \\\"crycle not exists\\\");\\n        require(userCrycle[msg.sender] == address(0), \\\"already joined crycle\\\");\\n        userCrycle[msg.sender] = creator;\\n        crycles[creator].userNum = crycles[creator].userNum + 1;\\n        emit NewUser(msg.sender, creator, crycles[creator].userNum, block.timestamp);\\n    }\\n\\n    struct VoteInfo {\\n        uint beginAt;\\n        uint countAt;\\n        uint finishAt;\\n        uint reward;\\n    }\\n\\n    function DebugSetBeginAt(uint timestamp) external {\\n        voteInfo[voteInfo.length - 1].beginAt = timestamp;\\n    }\\n\\n    function DebugSetCountAt(uint timestamp) external {\\n        voteInfo[voteInfo.length - 1].countAt = timestamp;\\n    }\\n\\n    function DebugSetFinishAt(uint timestamp) external {\\n        voteInfo[voteInfo.length - 1].finishAt = timestamp;\\n    }\\n\\n    VoteInfo[] public voteInfo;\\n\\n    function getVoteId() external view returns (uint) {\\n        return voteInfo.length;\\n    }\\n\\n    function startVote(uint256 beginAt, uint256 countAt, uint256 finishAt) external onlyOwner {\\n        if (voteInfo.length > 0) { //check if last vote finish\\n            require(block.timestamp > voteInfo[voteInfo.length - 1].finishAt, \\\"last vote not finish\\\");\\n        }\\n\\n        voteInfo.push(VoteInfo({\\n            beginAt: beginAt,\\n            countAt: countAt,\\n            finishAt: finishAt,\\n            reward: sds.balanceOf(address(this))\\n        }));\\n        uint _currentVoteId = voteInfo.length;\\n        masterChef.createSnapshot(_currentVoteId);\\n        sds.createSnapshot(_currentVoteId);\\n        for (uint i = 0; i < pairs.length; i ++) {\\n            factory.createSnapshot(address(pairs[i]), _currentVoteId);\\n        }\\n        emit NewVoteInfo(_currentVoteId, beginAt, countAt, finishAt, sds.balanceOf(address(this)));\\n    }\\n\\n    function voteNum(address _user) public view returns (uint256) {\\n        uint totalVotes = sds.getUserSnapshot(_user);\\n        for (uint i = 0; i < pairs.length; i ++) {\\n            (uint price0, uint price1) = factory.getSnapshotPrice(pairs[i]);\\n            uint price = address(sds) == pairs[i].token0() ? price0 : price1;\\n            uint pairVotes = factory.getSnapshotBalance(pairs[i], msg.sender);\\n            uint lockVotes = masterChef.getUserSnapshot(pairs[i], msg.sender);\\n            totalVotes = totalVotes.add(price.mul(pairVotes.div(1e18))).add(price.mul(lockVotes).div(1e18)).div(1e16);\\n        }\\n        return totalVotes;\\n    }\\n\\n    function doVote(uint num) external {\\n        uint voteId = voteInfo.length;\\n        require(voteId > 0, \\\"vote not begin\\\");\\n        VoteInfo memory _voteInfo = voteInfo[voteInfo.length - 1];\\n        require(block.timestamp >= _voteInfo.beginAt && block.timestamp < _voteInfo.countAt, \\\"not the right time\\\");\\n        require(userCrycle[msg.sender] != address(0), \\\"illegal user vote\\\");\\n        userVote[voteId][msg.sender] = userVote[voteId][msg.sender].add(num);\\n        crycleVote[voteId][userCrycle[msg.sender]] = crycleVote[voteId][userCrycle[msg.sender]].add(num);\\n        require(userVote[voteId][msg.sender] <= voteNum(msg.sender), \\\"illegal vote num\\\");\\n        emit NewVote(voteId, msg.sender, userCrycle[msg.sender], num, userVote[voteId][msg.sender], crycleVote[voteId][userCrycle[msg.sender]]);\\n    }\\n\\n    function doCount(address[] memory _crycles) external onlyOwner {\\n        uint voteId = voteInfo.length;\\n        if (voteId == 0) {\\n            return;\\n        }\\n        VoteInfo memory _voteInfo = voteInfo[voteId - 1];\\n        if (block.timestamp < _voteInfo.countAt && block.timestamp >= _voteInfo.finishAt) {\\n            return;\\n        }\\n        voteWiners[voteId] = _crycles;\\n        if (_crycles.length == 0) {\\n            return;\\n        }\\n        for (uint i = 0; i < _crycles.length; i ++) {\\n            voteReward[voteId][_crycles[i]] = _voteInfo.reward.div(_crycles.length); \\n        }\\n    }\\n\\n    function claim(uint _voteId, address _user) external {\\n        if (voteReward[_voteId][_user] > 0) {\\n            sds.transfer(_user, voteReward[_voteId][_user]);\\n        }\\n        voteReward[_voteId][_user] = 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9a4e77682742218509cc436a64b5b85b6b691bf50957b4d531b034e927290a95\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport './IKeplerPair.sol';\\n\\ninterface IKeplerFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function expectPairFor(address token0, address token1) external view returns (address);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\\n\\n    function getTransferFee(address[] memory tokens) external view returns (uint[] memory);\\n\\n    function _beforeTokenTransfer(address token0, address token1, address from, address to, uint256 amount) external;\\n\\n    function createSnapshot(address pair, uint256 id) external;\\n\\n    function getUserSnapshot(IKeplerPair pair, address user) external view returns (uint256);\\n\\n    function getSnapshotPrice(IKeplerPair pair) external view returns(uint price0, uint price1);\\n\\n    function getSnapshotBalance(IKeplerPair pair, address user) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x33aa3e792a9e63a21511041b3db52f27c3b725f2476a219e5f843a78758d41e8\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IKeplerPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x431055bf9132690a9d5db0308634f2dd75bbcb0c8e78bc7e6bf815388d78bccc\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport './IKeplerPair.sol';\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKeplerToken is IERC20 {\\n\\n    function createSnapshot(uint256 id) external;\\n\\n    function getUserSnapshot(address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xa7bd5236f7196e11abad5a27bb802f381d640e6d0f37549285af100bd9682dd6\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IKeplerPair.sol';\\n\\ninterface IMasterChef {\\n\\n    function getUserAmount(IKeplerPair pair, address user, uint lockType) external view returns (uint);\\n\\n    function getInviterAmount(IKeplerPair pair, address inviter) external view returns (uint);\\n\\n    function createSnapshot(uint256 id) external;\\n\\n    function getUserSnapshot(IKeplerPair pair, address _user) external view returns (uint256);\\n\\n    function doMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\\n\\n    function deposit(IKeplerPair _pair, uint256 _amount, uint256 _lockType) external;\\n\\n    function depositFor(IKeplerPair _pair, uint256 _amount, uint256 _lockType, address to) external;\\n\\n    function getPoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\\n\\n    function getUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\\n\\n    function getInvitePoolInfo(IKeplerPair _pair) external view returns (uint256 totalShares, uint256 token0AccPerShare, uint256 token1AccPerShare);\\n\\n    function getInviteUserInfo(IKeplerPair _pair, address _user) external view returns (uint256 amount, uint256 shares, uint256 token0Debt, uint256 token1Debt, uint256 token0Pending, uint256 token1Pending);\\n\\n    function doInviteMiner(IKeplerPair pair, IERC20 token, uint256 amount) external;\\n\\n    function userLockNum(IKeplerPair _pair, address user) external view returns (uint256);\\n\\n    function userLockInfo(IKeplerPair _pair, address _user, uint256 id) external view returns (uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xca271ae40a5ed97552949f7a316cfcbbf1b07b80c3358c56f4400ea9d9c3753e\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IUser {\\n\\n    function inviter(address user) external view returns (address);\\n\\n    function inviteNume(address user) external view returns (uint256);\\n\\n    function userNum() external view returns (uint256);\\n\\n    function registe(address _inviter) external;\\n\\n    function userExists(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00192282a7af750d948b41e0e1782901ec105184a853bbb8c5d0585244fadb88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200399b3803806200399b833981810160405260c08110156200003857600080fd5b508051602082015160408301516060840151608085015160a09095015193949293919290916000620000696200013c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350606095861b6001600160601b031990811660805294861b851660a0526001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03959095169490941790935590841b831660c052831b821660e05290911b166101005262000140565b3390565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6137c1620001da6000398061218352806129265280612d175280612e9e525080611f9c52806120f8528061225d528061232652806129e35280612c6c5280612e5f52508061112a5280612623525080611425528061209a528061264d52806127245280612f6c5250806113d452806123e752506137c16000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638494ff3511610125578063c45a0155116100ad578063ddd5e1b21161007c578063ddd5e1b2146109fe578063e8e81fe414610a2a578063ede0c2c414610ace578063f2fde38b14610af4578063f738f16914610b1a57610211565b8063c45a0155146109ba578063d25dc833146109c2578063dc37596d146109ca578063dd764abf146109f657610211565b8063b1d52687116100f4578063b1d526871461090f578063b91ac78814610917578063be1f6bbe14610934578063bf9006f51461095a578063c2b7bbb61461099457610211565b80638494ff351461087e5780638da5cb5b146108c15780639670d309146108c95780639c87a5e9146108e657610211565b8063575a86b2116101a85780636bda1847116101775780636bda184714610602578063715018a61461062557806372910be01461062d5780637914d84f146106d1578063841bdf851461085257610211565b8063575a86b2146104065780635ba8f0411461040e578063687ceaa5146105bc5780636ac19326146105d657610211565b80633ca5b234116101e45780633ca5b234146103355780634a82f44f1461033d5780634f8632ba146103e157806356194882146103e957610211565b806311b475b714610216578063124258c6146102b9578063254068b0146102d65780632b42dc6214610318575b600080fd5b6102b76004803603602081101561022c57600080fd5b810190602081018135600160201b81111561024657600080fd5b82018360208201111561025857600080fd5b803590602001918460208302840111600160201b8311171561027957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b37945050505050565b005b6102b7600480360360208110156102cf57600080fd5b5035610cbc565b6102fc600480360360208110156102ec57600080fd5b50356001600160a01b0316610fc0565b604080516001600160a01b039092168252519081900360200190f35b6102b76004803603602081101561032e57600080fd5b5035610fdb565b6102fc611128565b6102b76004803603602081101561035357600080fd5b810190602081018135600160201b81111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460018302840111600160201b831117156103a057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061114c945050505050565b6102fc6113d2565b6102b7600480360360208110156103ff57600080fd5b50356113f6565b6102fc611423565b6102b76004803603606081101561042457600080fd5b810190602081018135600160201b81111561043e57600080fd5b82018360208201111561045057600080fd5b803590602001918460018302840111600160201b8311171561047157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156104c357600080fd5b8201836020820111156104d557600080fd5b803590602001918460018302840111600160201b831117156104f657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561054857600080fd5b82018360208201111561055a57600080fd5b803590602001918460018302840111600160201b8311171561057b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611447945050505050565b6105c4611949565b60408051918252519081900360200190f35b6105c4600480360360408110156105ec57600080fd5b50803590602001356001600160a01b0316611957565b6102fc6004803603604081101561061857600080fd5b5080359060200135611974565b6102b76119ac565b6102b76004803603602081101561064357600080fd5b810190602081018135600160201b81111561065d57600080fd5b82018360208201111561066f57600080fd5b803590602001918460018302840111600160201b8311171561069057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a58945050505050565b6106f7600480360360208110156106e757600080fd5b50356001600160a01b0316611c3b565b60405180866001600160a01b03168152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015610751578181015183820152602001610739565b50505050905090810190601f16801561077e5780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b838110156107b1578181015183820152602001610799565b50505050905090810190601f1680156107de5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b838110156108115781810151838201526020016107f9565b50505050905090810190601f16801561083e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6105c46004803603604081101561086857600080fd5b50803590602001356001600160a01b0316611e14565b61089b6004803603602081101561089457600080fd5b5035611e31565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102fc611e6b565b6102b7600480360360208110156108df57600080fd5b5035611e7a565b6102b7600480360360608110156108fc57600080fd5b5080359060208101359060400135611ea3565b6102fc612324565b6102fc6004803603602081101561092d57600080fd5b5035612348565b6102b76004803603602081101561094a57600080fd5b50356001600160a01b0316612372565b6109806004803603602081101561097057600080fd5b50356001600160a01b03166125ea565b604080519115158252519081900360200190f35b6102b7600480360360208110156109aa57600080fd5b50356001600160a01b0316612871565b6102fc612924565b6105c4612948565b6105c4600480360360408110156109e057600080fd5b50803590602001356001600160a01b031661294e565b6105c461296b565b6102b760048036036040811015610a1457600080fd5b50803590602001356001600160a01b0316612978565b6102b760048036036020811015610a4057600080fd5b810190602081018135600160201b811115610a5a57600080fd5b820183602082011115610a6c57600080fd5b803590602001918460018302840111600160201b83111715610a8d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612a80945050505050565b6105c460048036036020811015610ae457600080fd5b50356001600160a01b0316612c67565b6102b760048036036020811015610b0a57600080fd5b50356001600160a01b0316613087565b6102b760048036036020811015610b3057600080fd5b5035613189565b610b3f6131b6565b6001600160a01b0316610b50611e6b565b6001600160a01b031614610b99576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b60085480610ba75750610cb9565b600060086001830381548110610bb957fe5b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050806020015142108015610c13575080604001514210155b15610c1f575050610cb9565b60008281526006602090815260409091208451610c3e928601906135f4565b508251610c4c575050610cb9565b60005b8351811015610cb55783516060830151610c68916131ba565b600760008581526020019081526020016000206000868481518110610c8957fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002055600101610c4f565b5050505b50565b60085480610d02576040805162461bcd60e51b815260206004820152600e60248201526d3b37ba32903737ba103132b3b4b760911b604482015290519081900360640190fd5b60088054600091906000198101908110610d1857fe5b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905080600001514210158015610d725750806020015142105b610db8576040805162461bcd60e51b81526020600482015260126024820152716e6f74207468652072696768742074696d6560701b604482015290519081900360640190fd5b336000908152600360205260409020546001600160a01b0316610e16576040805162461bcd60e51b8152602060048201526011602482015270696c6c6567616c207573657220766f746560781b604482015290519081900360640190fd5b6000828152600460209081526040808320338452909152902054610e3a9084613223565b600083815260046020908152604080832033808552908352818420949094558583526005825280832093835260038252808320546001600160a01b031683529290522054610e889084613223565b60008381526005602090815260408083203380855260038452828520546001600160a01b03168552925290912091909155610ec290612c67565b60008381526004602090815260408083203384529091529020541115610f22576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20766f7465206e756d60801b604482015290519081900360640190fd5b3360008181526003602090815260408083205486845260048352818420858552835281842054878552600584528285206001600160a01b039290921680865291845293829020548251888152938401959095528282015260608201879052608082019290925260a0810192909252517fa012c056dc4aa551964098e4b349968344504de66c1ea4b45922bb314b1675ad9181900360c00190a1505050565b6003602052600090815260409020546001600160a01b031681565b610fe36131b6565b6001600160a01b0316610ff4611e6b565b6001600160a01b03161461103d576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b6001548110611083576040805162461bcd60e51b815260206004820152600d60248201526c0d2d8d8cacec2d840d2dcc8caf609b1b604482015290519081900360640190fd5b600154600019018110156110f8576001805460001981019081106110a357fe5b600091825260209091200154600180546001600160a01b0390921691839081106110c957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600180548061110357fe5b600082815260209020810160001990810180546001600160a01b031916905501905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b61040081511115611198576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b336000908152600260205260409020546001600160a01b03166111f6576040805162461bcd60e51b8152602060048201526011602482015270637279636c65206e6f742063726561746560781b604482015290519081900360640190fd5b3360009081526002602081815260408084208301805482516001821615610100026000190190911694909404601f8101849004840285018401909252818452918301828280156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b505033600090815260026020818152604090922088519697506112b4969101945090870192509050613659565b507fc32ce3280087be10e89e1a0c4f66b18a8f603617213a05c5edfc6b7b95ecd7703382844260405180856001600160a01b031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611330578181015183820152602001611318565b50505050905090810190601f16801561135d5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015611390578181015183820152602001611378565b50505050905090810190601f1680156113bd5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60088054829190600019810190811061140b57fe5b90600052602060002090600402016001018190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61145033613284565b156114a2576040805162461bcd60e51b815260206004820152601e60248201527f636f6e74726163742063616e206e6f742063726561746520637279636c650000604482015290519081900360640190fd5b6020835111156114ea576040805162461bcd60e51b815260206004820152600e60248201526d7469746c6520746f6f206c6f6e6760901b604482015290519081900360640190fd5b61040082511115611536576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b61010081511115611582576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b61158b336125ea565b6115c65760405162461bcd60e51b815260040180806020018281038252603a815260200180613711603a913960400191505060405180910390fd5b336000908152600260205260409020546001600160a01b031615611629576040805162461bcd60e51b8152602060048201526015602482015274616c72656164792063726561746520637279636c6560581b604482015290519081900360640190fd5b336000908152600360205260409020546001600160a01b031615611688576040805162461bcd60e51b8152602060048201526011602482015270616c726561647920696e20637279636c6560781b604482015290519081900360640190fd5b6040805160a081018252338082526020808301878152838501879052606084018690526000608085018190529283526002825293909120825181546001600160a01b0319166001600160a01b03909116178155925180519293926116f29260018501920190613659565b506040820151805161170e916002840191602090910190613659565b506060820151805161172a916003840191602090910190613659565b5060809182015160049182015533600081815260036020908152604080832080546001600160a01b03191685179055600282528083209094018054600101905583518381524295810186905260a08183018181528a519183019190915289517f51d49c93ef742f71593a550607ee2e5c5b6cdc701994abcbb6de57e979e6453c9795968b968b968b969195949392850192606086019260c0870192908b0191908190849084905b838110156117e95781810151838201526020016117d1565b50505050905090810190601f1680156118165780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b83811015611849578181015183820152602001611831565b50505050905090810190601f1680156118765780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b838110156118a9578181015183820152602001611891565b50505050905090810190601f1680156118d65780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1336000818152600260209081526040918290206004015482518481529182019390935280820192909252426060830152517fcb73c1460b15b6069c2609fae376f35ea2eecd1294e08ef5ea486c5937fce8659181900360800190a1505050565b69010f0cf064dd5920000081565b600760209081526000928352604080842090915290825290205481565b6006602052816000526040600020818154811061199057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6119b46131b6565b6001600160a01b03166119c5611e6b565b6001600160a01b031614611a0e576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b602081511115611aa0576040805162461bcd60e51b815260206004820152600e60248201526d7469746c6520746f6f206c6f6e6760901b604482015290519081900360640190fd5b336000908152600260205260409020546001600160a01b0316611afe576040805162461bcd60e51b8152602060048201526011602482015270637279636c65206e6f742063726561746560781b604482015290519081900360640190fd5b3360009081526002602081815260408084206001908101805483519281161561010002600019011694909404601f81018490048402820184019092528181529291830182828015611b905780601f10611b6557610100808354040283529160200191611b90565b820191906000526020600020905b815481529060010190602001808311611b7357829003601f168201915b50503360009081526002602090815260409091208751959650611bc0956001909101945090870192509050613659565b507f48610541dd7c19826ef82a3a2e6342bb67c41141fb0a7c75f0ac2baa080ed4663382844260405180856001600160a01b0316815260200180602001806020018481526020018381038352868181518152602001915080519060200190808383600083811015611330578181015183820152602001611318565b6002602081815260009283526040928390208054600180830180548751601f600019948316156101000294909401909116969096049182018590048502860185019096528085526001600160a01b0390911694919392830182828015611ce25780601f10611cb757610100808354040283529160200191611ce2565b820191906000526020600020905b815481529060010190602001808311611cc557829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015611d745780601f10611d4957610100808354040283529160200191611d74565b820191906000526020600020905b815481529060010190602001808311611d5757829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015611e045780601f10611dd957610100808354040283529160200191611e04565b820191906000526020600020905b815481529060010190602001808311611de757829003601f168201915b5050505050908060040154905085565b600560209081526000928352604080842090915290825290205481565b60088181548110611e4157600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b6000546001600160a01b031690565b600880548291906000198101908110611e8f57fe5b600091825260209091206004909102015550565b611eab6131b6565b6001600160a01b0316611ebc611e6b565b6001600160a01b031614611f05576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b60085415611f7b57600880546000198101908110611f1f57fe5b9060005260206000209060040201600201544211611f7b576040805162461bcd60e51b81526020600482015260146024820152730d8c2e6e840ecdee8ca40dcdee840ccd2dcd2e6d60631b604482015290519081900360640190fd5b600860405180608001604052808581526020018481526020018381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561200757600080fd5b505afa15801561201b573d6000803e3d6000fd5b505050506040513d602081101561203157600080fd5b50519052815460018181018455600093845260208085208451600494850290910190815590840151918101919091556040808401516002830155606090930151600390910155600854825163964f551760e01b8152918201819052915191926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263964f551792602480820193929182900301818387803b1580156120de57600080fd5b505af11580156120f2573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663964f5517826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561215c57600080fd5b505af1158015612170573d6000803e3d6000fd5b5050505060005b600154811015612235577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c0f73d8600183815481106121bd57fe5b6000918252602082200154604080516001600160e01b031960e086901b1681526001600160a01b03909216600483015260248201879052516044808301939282900301818387803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b5050600190920191506121779050565b507f2dd8ac466cc54033f2b4f9d126bae28b23303b44da3e45c2f7f224442588d33a818585857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d60208110156122f257600080fd5b50516040805195865260208601949094528484019290925260608401526080830152519081900360a00190a150505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061235857600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b03821614156123c7576040805162461bcd60e51b815260206004820152601460248201527331b0b7103737ba1030b232103cb7bab939b2b63360611b604482015290519081900360640190fd5b60408051630e666e4960e01b815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630e666e49916024808301926020929190829003018186803b15801561242d57600080fd5b505afa158015612441573d6000803e3d6000fd5b505050506040513d602081101561245757600080fd5b505161249d576040805162461bcd60e51b815260206004820152601060248201526f75736572206e6f74207265676973746560801b604482015290519081900360640190fd5b6001600160a01b03818116600090815260026020526040902054166124fd576040805162461bcd60e51b8152602060048201526011602482015270637279636c65206e6f742065786973747360781b604482015290519081900360640190fd5b336000908152600360205260409020546001600160a01b031615612560576040805162461bcd60e51b8152602060048201526015602482015274616c7265616479206a6f696e656420637279636c6560581b604482015290519081900360640190fd5b33600081815260036020908152604080832080546001600160a01b0387166001600160a01b03199091168117909155808452600283529281902060040180546001019081905581519485529184019290925282820152426060830152517fcb73c1460b15b6069c2609fae376f35ea2eecd1294e08ef5ea486c5937fce8659181900360800190a150565b60008080805b6001548110156128325760006126476001838154811061260c57fe5b6000918252602090912001546001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000061328a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a260988c6001858154811061268757fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b039283166004820152918c166024830152600360448301525160648083019392829003018186803b1580156126e457600080fd5b505afa1580156126f8573d6000803e3d6000fd5b505050506040513d602081101561270e57600080fd5b5051600180549192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632cae426b918790811061275557fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b039283166004820152918d1660248301525160448083019392829003018186803b1580156127ab57600080fd5b505afa1580156127bf573d6000803e3d6000fd5b505050506040513d60208110156127d557600080fd5b505190506127ff6127f8670de0b6b3a76400006127f2858761359b565b906131ba565b8790613223565b955061282161281a670de0b6b3a76400006127f2848761359b565b8690613223565b945050600190920191506125f09050565b50681b1ae4d6e2ef50000082101580612855575069010f0cf064dd592000008110155b156128655760019250505061286c565b6000925050505b919050565b6128796131b6565b6001600160a01b031661288a611e6b565b6001600160a01b0316146128d3576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085490565b600460209081526000928352604080842090915290825290205481565b681b1ae4d6e2ef50000081565b60008281526007602090815260408083206001600160a01b038516845290915290205415612a5a5760008281526007602090815260408083206001600160a01b0385811680865291845282852054835163a9059cbb60e01b81526004810193909352602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169363a9059cbb9360448084019491939192918390030190829087803b158015612a2d57600080fd5b505af1158015612a41573d6000803e3d6000fd5b505050506040513d6020811015612a5757600080fd5b50505b60009182526007602090815260408084206001600160a01b039093168452919052812055565b61010081511115612acc576040805162461bcd60e51b81526020600482015260116024820152706d61696e6665737420746f6f206c6f6e6760781b604482015290519081900360640190fd5b336000908152600260205260409020546001600160a01b0316612b2a576040805162461bcd60e51b8152602060048201526011602482015270637279636c65206e6f742063726561746560781b604482015290519081900360640190fd5b336000908152600260208181526040808420600301805482516001821615610100026000190190911694909404601f810184900484028501840190925281845291830182828015612bbc5780601f10612b9157610100808354040283529160200191612bbc565b820191906000526020600020905b815481529060010190602001808311612b9f57829003601f168201915b50503360009081526002602090815260409091208751959650612bec956003909101945090870192509050613659565b507fd86d83d41dbcd6f1c5e2945cbb2200704ca5a5f417def82304643d941144f1b03382844260405180856001600160a01b0316815260200180602001806020018481526020018381038352868181518152602001915080519060200190808383600083811015611330578181015183820152602001611318565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b68d0a09846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612cd757600080fd5b505afa158015612ceb573d6000803e3d6000fd5b505050506040513d6020811015612d0157600080fd5b5051905060005b600154811015613080576000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f3711a0860018581548110612d5157fe5b600091825260209091200154604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301528051602480840193829003018186803b158015612d9e57600080fd5b505afa158015612db2573d6000803e3d6000fd5b505050506040513d6040811015612dc857600080fd5b5080516020909101516001805492945090925060009185908110612de857fe5b6000918252602091829020015460408051630dfe168160e01b815290516001600160a01b0390921692630dfe168192600480840193829003018186803b158015612e3157600080fd5b505afa158015612e45573d6000803e3d6000fd5b505050506040513d6020811015612e5b57600080fd5b50517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614612e965781612e98565b825b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa80ccd760018781548110612ed857fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301523360248301525160448083019392829003018186803b158015612f2c57600080fd5b505afa158015612f40573d6000803e3d6000fd5b505050506040513d6020811015612f5657600080fd5b5051600180549192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632d2d55eb9189908110612f9d57fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301523360248301525160448083019392829003018186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d602081101561301b57600080fd5b5051905061306d662386f26fc100006127f2613041670de0b6b3a764000082888761359b565b61306761306061305988670de0b6b3a76400006131ba565b899061359b565b8c90613223565b90613223565b96505060019094019350612d0892505050565b5092915050565b61308f6131b6565b6001600160a01b03166130a0611e6b565b6001600160a01b0316146130e9576040805162461bcd60e51b8152602060048201819052602482015260008051602061376c833981519152604482015290519081900360640190fd5b6001600160a01b03811661312e5760405162461bcd60e51b81526004018080602001828103825260268152602001806136eb6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60088054829190600019810190811061319e57fe5b90600052602060002090600402016002018190555050565b3390565b6000808211613210576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161321957fe5b0490505b92915050565b60008282018381101561327d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3b151590565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d60208110156132f057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0387169163d21220a7916004808301926020929190829003018186803b15801561333857600080fd5b505afa15801561334c573d6000803e3d6000fd5b505050506040513d602081101561336257600080fd5b505190506001600160a01b0382811690851614806133915750836001600160a01b0316816001600160a01b0316145b6133d2576040805162461bcd60e51b815260206004820152600d60248201526c34b63632b3b0b6103a37b5b2b760991b604482015290519081900360640190fd5b600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561340e57600080fd5b505afa158015613422573d6000803e3d6000fd5b505050506040513d606081101561343857600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b03868116908516141561351157811561350c57613501826127f2670de0b6b3a7640000876001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134cf57600080fd5b505afa1580156134e3573d6000803e3d6000fd5b505050506040513d60208110156134f957600080fd5b50519061359b565b94505050505061321d565b61358e565b826001600160a01b0316866001600160a01b0316141561358e57801561358e57613501816127f2670de0b6b3a7640000866001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134cf57600080fd5b5060009695505050505050565b6000826135aa5750600061321d565b828202828482816135b757fe5b041461327d5760405162461bcd60e51b815260040180806020018281038252602181526020018061374b6021913960400191505060405180910390fd5b828054828255906000526020600020908101928215613649579160200282015b8281111561364957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613614565b506136559291506136d5565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261368f5760008555613649565b82601f106136a857805160ff1916838001178555613649565b82800160010185558215613649579182015b828111156136495782518255916020019190600101906136ba565b5b8082111561365557600081556001016136d656fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736174206c65617365206c6f636b20353030204255534420616e6420534453206f7220696e766974652035303030204255534420616e6420534453536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122044d9f410aa516447d359e53385200b354068e18fe39e26311a1e1b81c4ef927364736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1800,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "pairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IKeplerPair)8728)dyn_storage"
      },
      {
        "astId": 1831,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(CrycleInfo)1827_storage)"
      },
      {
        "astId": 1835,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "userCrycle",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1841,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "userVote",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1847,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "crycleVote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1852,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "voteWiners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1858,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "voteReward",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2618,
        "contract": "contracts/farm/Crycle.sol:Crycle",
        "label": "voteInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(VoteInfo)2567_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IKeplerPair)8728)dyn_storage": {
        "base": "t_contract(IKeplerPair)8728",
        "encoding": "dynamic_array",
        "label": "contract IKeplerPair[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(VoteInfo)2567_storage)dyn_storage": {
        "base": "t_struct(VoteInfo)2567_storage",
        "encoding": "dynamic_array",
        "label": "struct Crycle.VoteInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IKeplerPair)8728": {
        "encoding": "inplace",
        "label": "contract IKeplerPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(CrycleInfo)1827_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Crycle.CrycleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CrycleInfo)1827_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CrycleInfo)1827_storage": {
        "encoding": "inplace",
        "label": "struct Crycle.CrycleInfo",
        "members": [
          {
            "astId": 1818,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1820,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1822,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "mainfest",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1824,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "telegram",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1826,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "userNum",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(VoteInfo)2567_storage": {
        "encoding": "inplace",
        "label": "struct Crycle.VoteInfo",
        "members": [
          {
            "astId": 2560,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "beginAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2562,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "countAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2564,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "finishAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2566,
            "contract": "contracts/farm/Crycle.sol:Crycle",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}