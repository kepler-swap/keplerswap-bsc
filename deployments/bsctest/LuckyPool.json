{
  "address": "0xf1f566516A5c849769098a9a64152bE44F2951eE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRandom",
          "name": "_random",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "luckyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LuckyPoolBegin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "luckyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "lucky",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "best",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward1",
          "type": "uint256"
        }
      ],
      "name": "LuckyPoolClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "luckyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        }
      ],
      "name": "LuckyPoolOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "luckyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward1",
          "type": "uint256"
        }
      ],
      "name": "LuckyPoolRewardInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BEST_WINER_NUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_WAIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPEN_WAIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WINER_NUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINER_NUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "avaliableUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beginLuckyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "r",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "doHardWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "luckyInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beginAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "luckyPairsNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        }
      ],
      "name": "luckyPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "luckyUsers0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "luckyUsers1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "contract IKeplerPair[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "perPairNum",
          "type": "uint256[]"
        }
      ],
      "name": "openLuckyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "openUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "random",
      "outputs": [
        {
          "internalType": "contract IRandom",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receiveAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IKeplerPair",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "avaliableUserNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openUserNum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bestUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "luckyUserNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRandom",
          "name": "_random",
          "type": "address"
        }
      ],
      "name": "setRandom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd55a3dd1c1b4ff4cdf7d515a343217a65a4b226516b06f71ed0d37f11159e811",
  "receipt": {
    "to": null,
    "from": "0x0b40a188D28F8cF561Ad7B665dfb0f3D3b77BffF",
    "contractAddress": "0xf1f566516A5c849769098a9a64152bE44F2951eE",
    "transactionIndex": 3,
    "gasUsed": "2207286",
    "logsBloom": "0x
    "blockHash": "0xc032764e5e43c00283a50f4861a6bb8ffa40124a619d6f1c64ab13f9ddd866f9",
    "transactionHash": "0xd55a3dd1c1b4ff4cdf7d515a343217a65a4b226516b06f71ed0d37f11159e811",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 13568981,
        "transactionHash": "0xd55a3dd1c1b4ff4cdf7d515a343217a65a4b226516b06f71ed0d37f11159e811",
        "address": "0xf1f566516A5c849769098a9a64152bE44F2951eE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b40a188d28f8cf561ad7b665dfb0f3d3b77bfff"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xc032764e5e43c00283a50f4861a6bb8ffa40124a619d6f1c64ab13f9ddd866f9"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 13568981,
        "transactionHash": "0xd55a3dd1c1b4ff4cdf7d515a343217a65a4b226516b06f71ed0d37f11159e811",
        "address": "0xf1f566516A5c849769098a9a64152bE44F2951eE",
        "topics": [
          "0xf54544980c2cb53c7f24ba0544d0e589b21cfd823d23bb10dee28b6814b20b5c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006178452d",
        "logIndex": 8,
        "blockHash": "0xc032764e5e43c00283a50f4861a6bb8ffa40124a619d6f1c64ab13f9ddd866f9"
      }
    ],
    "blockNumber": 13568981,
    "cumulativeGasUsed": "2622903",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3CBE4F722C98A0fed7b9724fe5eBDeB59a5416c8"
  ],
  "solcInputHash": "79df23217798be468311a9a1f72d7e6c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRandom\",\"name\":\"_random\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"luckyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LuckyPoolBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"luckyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lucky\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"best\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward1\",\"type\":\"uint256\"}],\"name\":\"LuckyPoolClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"luckyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"}],\"name\":\"LuckyPoolOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"luckyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward1\",\"type\":\"uint256\"}],\"name\":\"LuckyPoolRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BEST_WINER_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_WAIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPEN_WAIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WINER_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINER_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"avaliableUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginLuckyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"r\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beginAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyPairsNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"luckyPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"luckyUsers0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"luckyUsers1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"contract IKeplerPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perPairNum\",\"type\":\"uint256[]\"}],\"name\":\"openLuckyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"openUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"internalType\":\"contract IRandom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IKeplerPair\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avaliableUserNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openUserNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bestUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"luckyUserNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRandom\",\"name\":\"_random\",\"type\":\"address\"}],\"name\":\"setRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/LuckyPool.sol\":\"LuckyPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/farm/LuckyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '../interfaces/IKeplerPair.sol';\\nimport '../interfaces/IRandom.sol';\\nimport '../interfaces/IUser.sol';\\n\\ncontract LuckyPool is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\t\\n    uint256 constant public WINER_NUM = 10;\\n    uint256 constant public BEST_WINER_NUM = 1;\\n    uint256 constant public TOTAL_WINER_NUM = WINER_NUM + BEST_WINER_NUM;\\n    //uint256 constant public OPEN_WAIT = 3600;\\n    uint256 constant public OPEN_WAIT = 60;\\n    uint256 constant public CLAIM_WAIT = 3 days;\\n    //uint256 constant public CLAIM_WAIT = 3600;\\n\\t\\t\\n    event LuckyPoolBegin(uint256 luckyId, uint256 timestamp);\\n    event LuckyPoolOpen(uint256 luckyId, uint256 countAt, uint256 openAt, uint256 finishAt);\\n    event LuckyPoolRewardInfo(uint256 luckyId, IKeplerPair pair, uint256 userNum, uint256 reward0, uint256 reward1);\\n    event LuckyPoolClaim(uint256 luckyId, address user, IKeplerPair pair, bool lucky, bool best, uint256 reward0, uint256 reward1);\\n\\n    mapping(IKeplerPair => mapping(address => uint256)) public receiveAmounts;\\n\\n    function doHardWork(IKeplerPair _pair, address _token, uint256 _amount) external {\\n        SafeERC20.safeTransferFrom(IERC20(_token), msg.sender, address(this), _amount);\\n        receiveAmounts[_pair][_token] += _amount;\\n    }\\n\\n    struct LuckyInfo {\\n        uint256 beginAt;\\n        uint256 countAt;\\n        uint256 openAt;\\n        uint256 finishAt;\\n        uint256 luckyPairsNum;\\n    }\\n    LuckyInfo[] public luckyInfos;\\n    mapping(uint256 => mapping(IKeplerPair => bool)) public luckyPairs;\\n\\n    function beginLuckyPool() public onlyOwner {\\n        if (luckyInfos.length > 0) {\\n            LuckyInfo storage luckyInfo = luckyInfos[luckyInfos.length - 1];\\n            if (luckyInfo.countAt == 0) {\\n                return;\\n            }\\n        }\\n        luckyInfos.push(LuckyInfo({\\n            beginAt: block.timestamp,\\n            countAt: 0,\\n            openAt: 0,\\n            finishAt: 0,\\n            luckyPairsNum: 0\\n        }));\\n        emit LuckyPoolBegin(luckyInfos.length - 1, block.timestamp);\\n    }\\n\\n    struct RewardInfo {\\n        uint256 avaliableUserNum;\\n        uint256 openUserNum;\\n        address bestUser;\\n        uint256 luckyUserNum;\\n        uint256 reward0;\\n        uint256 reward1;\\n    }\\n    mapping(uint256 => mapping(IKeplerPair => RewardInfo)) public rewardInfos;\\n    mapping(uint256 => mapping(IKeplerPair => mapping(address => bool))) public avaliableUsers;\\n    mapping(uint256 => mapping(IKeplerPair => mapping(address => bool))) public openUsers;\\n    mapping(uint256 => mapping(IKeplerPair => mapping(address => uint256))) public luckyUsers0;\\n    mapping(uint256 => mapping(IKeplerPair => mapping(address => uint256))) public luckyUsers1;\\n\\n    function openLuckyPool(address[] calldata users, IKeplerPair[] calldata pairs, uint256[] calldata perPairNum) external onlyOwner {\\n        LuckyInfo memory luckyInfo; \\n        uint256 luckyInfoIndex = uint256(-1);\\n        if (luckyInfos.length > 0) {\\n            luckyInfo = luckyInfos[luckyInfos.length -1];\\n            if (luckyInfos.length > 1 && luckyInfo.countAt == 0) {\\n                luckyInfo = luckyInfos[luckyInfos.length - 2];\\n                luckyInfoIndex = luckyInfos.length - 2;\\n            } else {\\n                luckyInfoIndex = luckyInfos.length - 1;\\n            }\\n            if (luckyInfo.finishAt <= block.timestamp) {\\n                luckyInfo = luckyInfos[luckyInfos.length - 1];\\n                luckyInfoIndex = luckyInfos.length - 1;\\n            }\\n            require(luckyInfo.openAt == 0 || luckyInfo.openAt >= block.timestamp, \\\"lucky pool already open\\\");\\n        }\\n        require(luckyInfoIndex != uint256(-1), \\\"lucky pool not begin\\\");\\n        require(pairs.length == perPairNum.length, \\\"illegal pair num\\\");\\n        uint userIndex = 0;\\n        for(uint i = 0; i < pairs.length; i ++) {\\n            uint avaliableUserNum = 0;\\n            for (uint j = 0; j < perPairNum[i]; j ++) {\\n                require(users.length > userIndex, \\\"illegal user length\\\");\\n                address user = users[userIndex];\\n                userIndex ++;\\n                if (!avaliableUsers[luckyInfoIndex][pairs[i]][user]) {\\n                    avaliableUsers[luckyInfoIndex][pairs[i]][user] = true;\\n                    avaliableUserNum ++;\\n                }\\n            }\\n            if (avaliableUserNum > 0) {\\n                rewardInfos[luckyInfoIndex][pairs[i]].avaliableUserNum = rewardInfos[luckyInfoIndex][pairs[i]].avaliableUserNum + avaliableUserNum; \\n                rewardInfos[luckyInfoIndex][pairs[i]].reward0 = receiveAmounts[pairs[i]][pairs[i].token0()];\\n                rewardInfos[luckyInfoIndex][pairs[i]].reward1 = receiveAmounts[pairs[i]][pairs[i].token1()];\\n                emit LuckyPoolRewardInfo(luckyInfoIndex, pairs[i], rewardInfos[luckyInfoIndex][pairs[i]].avaliableUserNum, rewardInfos[luckyInfoIndex][pairs[i]].reward0, rewardInfos[luckyInfoIndex][pairs[i]].reward1);\\n            }\\n            if (!luckyPairs[luckyInfoIndex][pairs[i]]) {\\n                luckyPairs[luckyInfoIndex][pairs[i]] = true;\\n                luckyInfos[luckyInfoIndex].luckyPairsNum ++;\\n            }\\n        }\\n        if (luckyInfo.countAt == 0) {\\n            luckyInfos[luckyInfoIndex].countAt = block.timestamp;\\n            luckyInfos[luckyInfoIndex].openAt = block.timestamp + OPEN_WAIT; //1 hour later\\n            luckyInfos[luckyInfoIndex].finishAt = block.timestamp + CLAIM_WAIT; //72 hour later\\n            emit LuckyPoolOpen(luckyInfoIndex, luckyInfos[luckyInfoIndex].countAt, luckyInfos[luckyInfoIndex].openAt, luckyInfos[luckyInfoIndex].finishAt);\\n            beginLuckyPool();\\n        }\\n    }\\n\\n    function rewardPoolId() public view returns (uint256) {\\n        uint256 luckyInfoIndex = uint256(-1);\\n        if (luckyInfos.length > 0) {\\n            LuckyInfo storage luckyInfo = luckyInfos[luckyInfos.length - 1];\\n            if (luckyInfos.length > 1 && luckyInfo.countAt == 0) {\\n                luckyInfo = luckyInfos[luckyInfos.length - 2];\\n                luckyInfoIndex = luckyInfos.length - 2;\\n            } else {\\n                luckyInfoIndex = luckyInfos.length - 1;\\n            }\\n            if (luckyInfo.openAt != 0 && luckyInfo.openAt <= block.timestamp && luckyInfo.finishAt >= block.timestamp) {\\n                return luckyInfoIndex;\\n            }\\n        }\\n        return uint256(-1);\\n    }\\n\\n    function currentPoolId() public view returns (uint256) {\\n        return luckyInfos.length - 1;\\n    }\\n\\n    IRandom public random;\\n\\n    constructor(IRandom _random) {\\n        random = _random;\\n        beginLuckyPool();\\n    }\\n\\n    function setRandom(IRandom _random) external onlyOwner {\\n        random = _random;\\n    }\\n\\n    function tokenSafeTransfer(IERC20 token,address toAddr,uint256 amount) private{\\n\\tSafeERC20.safeTransfer(token, toAddr, amount <token.balanceOf(address(this))? amount :token.balanceOf(address(this)));\\n    }\\n    \\n    function claim(IKeplerPair pair, string memory r) external {\\n        require(!address(msg.sender).isContract(), \\\"contract can not claim\\\");\\n        uint256 currentRewardPoolId = rewardPoolId();\\n        LuckyInfo storage luckyInfo = luckyInfos[currentRewardPoolId];\\n        RewardInfo storage rewardInfo = rewardInfos[currentRewardPoolId][pair];\\n        require(block.timestamp >= luckyInfo.openAt && block.timestamp <= luckyInfo.finishAt, \\\"not the right time\\\");\\n        require(avaliableUsers[currentRewardPoolId][pair][msg.sender], \\\"do not have the right\\\");\\n        require(!openUsers[currentRewardPoolId][pair][msg.sender], \\\"already opened\\\");\\n        bool luckyOne = false;\\n        if (rewardInfo.avaliableUserNum - rewardInfo.openUserNum <= TOTAL_WINER_NUM - rewardInfo.luckyUserNum) {\\n            luckyOne = true;\\n        } else if (rewardInfo.luckyUserNum >= TOTAL_WINER_NUM) {\\n            luckyOne = false;\\n        } else {\\n            uint num = random.win(r, 5);\\n            luckyOne = num == 1;\\n        }\\n        openUsers[currentRewardPoolId][pair][msg.sender] = true;\\n        rewardInfo.openUserNum ++;\\n        if (!luckyOne) {\\n            emit LuckyPoolClaim(currentRewardPoolId, msg.sender, pair, luckyOne, false, 0, 0);\\n            return;\\n        }\\n        rewardInfo.luckyUserNum ++;\\n        bool isBestUser = false;\\n        if (rewardInfo.bestUser == address(0) && rewardInfo.luckyUserNum > 2) {\\n            isBestUser = true;\\n        }\\n        uint reward0 = 0;\\n        uint reward1 = 0;\\n        if (isBestUser) {\\n            reward0 = rewardInfo.reward0.div(2);\\n            reward1 = rewardInfo.reward1.div(2);\\n            rewardInfo.bestUser = msg.sender;\\n        } else {\\n            reward0 = rewardInfo.reward0.div(2).div(WINER_NUM);\\n            reward1 = rewardInfo.reward1.div(2).div(WINER_NUM);\\n        }\\n        luckyUsers0[currentRewardPoolId][pair][msg.sender] = reward0;\\n        luckyUsers1[currentRewardPoolId][pair][msg.sender] = reward1;\\n        if (reward0 > 0) {\\n            //SafeERC20.safeTransfer(IERC20(pair.token0()), msg.sender, reward0);\\n            tokenSafeTransfer(IERC20(pair.token0()), msg.sender, reward0);\\n            receiveAmounts[pair][pair.token0()] -= reward0;\\n        }\\n        if (reward1 > 0) {\\n            //SafeERC20.safeTransfer(IERC20(pair.token1()), msg.sender, reward1);\\n            tokenSafeTransfer(IERC20(pair.token1()), msg.sender, reward1);\\n            receiveAmounts[pair][pair.token1()] -= reward1;\\n        }\\n        emit LuckyPoolClaim(currentRewardPoolId, msg.sender, pair, luckyOne, isBestUser, reward0, reward1);\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x88425d284065b67bc4405a9b4c2dd2523716316c827a210665af41f3b1d3ffe4\",\"license\":\"MIT\"},\"contracts/interfaces/IKeplerPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IKeplerPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x431055bf9132690a9d5db0308634f2dd75bbcb0c8e78bc7e6bf815388d78bccc\",\"license\":\"MIT\"},\"contracts/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IRandom {\\n\\n    function win(string memory r, uint256 maxNum) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x3f988257f19316f6f4e353ff074f529527f6b74c09883214f119508f0ed0d0d1\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.2;\\n\\ninterface IUser {\\n\\n    function inviter(address user) external view returns (address);\\n\\n    function inviteNume(address user) external view returns (uint256);\\n\\n    function userNum() external view returns (uint256);\\n\\n    function registe(address _inviter) external;\\n\\n    function userExists(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00192282a7af750d948b41e0e1782901ec105184a853bbb8c5d0585244fadb88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4262,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "receiveAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4309,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "luckyInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(LuckyInfo)4306_storage)dyn_storage"
      },
      {
        "astId": 4315,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "luckyPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_bool))"
      },
      {
        "astId": 4384,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "rewardInfos",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_struct(RewardInfo)4378_storage))"
      },
      {
        "astId": 4392,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "avaliableUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 4400,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "openUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 4408,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "luckyUsers0",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4416,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "luckyUsers1",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4908,
        "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
        "label": "random",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IRandom)9035"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LuckyInfo)4306_storage)dyn_storage": {
        "base": "t_struct(LuckyInfo)4306_storage",
        "encoding": "dynamic_array",
        "label": "struct LuckyPool.LuckyInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IKeplerPair)8624": {
        "encoding": "inplace",
        "label": "contract IKeplerPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRandom)9035": {
        "encoding": "inplace",
        "label": "contract IRandom",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IKeplerPair)8624,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)8624",
        "label": "mapping(contract IKeplerPair => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)8624",
        "label": "mapping(contract IKeplerPair => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)8624",
        "label": "mapping(contract IKeplerPair => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IKeplerPair)8624,t_struct(RewardInfo)4378_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IKeplerPair)8624",
        "label": "mapping(contract IKeplerPair => struct LuckyPool.RewardInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardInfo)4378_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IKeplerPair => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IKeplerPair)8624,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IKeplerPair => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IKeplerPair => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IKeplerPair)8624,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IKeplerPair)8624,t_struct(RewardInfo)4378_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IKeplerPair => struct LuckyPool.RewardInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IKeplerPair)8624,t_struct(RewardInfo)4378_storage)"
      },
      "t_struct(LuckyInfo)4306_storage": {
        "encoding": "inplace",
        "label": "struct LuckyPool.LuckyInfo",
        "members": [
          {
            "astId": 4297,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "beginAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4299,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "countAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4301,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "openAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4303,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "finishAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4305,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "luckyPairsNum",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardInfo)4378_storage": {
        "encoding": "inplace",
        "label": "struct LuckyPool.RewardInfo",
        "members": [
          {
            "astId": 4367,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "avaliableUserNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4369,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "openUserNum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4371,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "bestUser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4373,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "luckyUserNum",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4375,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "reward0",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4377,
            "contract": "contracts/farm/LuckyPool.sol:LuckyPool",
            "label": "reward1",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}